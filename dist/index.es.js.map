{"version":3,"file":"index.es.js","sources":["../src/components/ImageStage/utils/getTranslateOffsetsFromScale.js","../src/components/ImageStage/utils/imageIsOutOfBounds.js","../src/components/ImageStage/components/Image/index.js","../src/components/ImageStage/utils/useDoubleClick.js","../src/components/ImageStage/utils/getMagnifierValue.js","../src/components/ImageStage/components/ImagePager/index.js","../src/components/ImageStage/utils/useWindowSize.js","../src/components/ImageStage/index.js","../src/components/PageContainer/index.js","../src/components/CreatePortal/index.js","../src/index.js"],"sourcesContent":["/**\n * Calculates the the translate(x,y) coordinates needed to zoom-in\n * to a point in an image.\n *\n * @param {ref} imageRef The image dom node used as a reference to calculate translate offsets\n * @param {number} scale The current transform scale of image\n * @param {number} pinchDelta The amount of change in the new transform scale\n * @param {array} touchOrigin The [x,y] coordinates of the zoom origin\n * @param {array} currentTranslate The current [x,y] translate values of image\n *\n * @returns {array} The next [x,y] translate values to apply to image\n */\nconst getTranslateOffsetsFromScale = ({\n    imageRef,\n    scale,\n    pinchDelta,\n    touchOrigin: [touchOriginX, touchOriginY],\n    currentTranslate: [translateX, translateY]\n}) => {\n    const {\n        top: imageTopLeftY,\n        left: imageTopLeftX,\n        width: imageWidth,\n        height: imageHeight\n    } = imageRef.current.getBoundingClientRect();\n\n    // Get the (x,y) touch position relative to image origin at the current scale\n    const imageCoordX = (touchOriginX - imageTopLeftX - imageWidth / 2) / scale;\n    const imageCoordY =\n        (touchOriginY - imageTopLeftY - imageHeight / 2) / scale;\n\n    // Calculate translateX/Y offset at the next scale to zoom to touch position\n    const newTranslateX = -imageCoordX * pinchDelta + translateX;\n    const newTranslateY = -imageCoordY * pinchDelta + translateY;\n\n    return [newTranslateX, newTranslateY];\n};\n\nexport default getTranslateOffsetsFromScale;\n","/**\n * Determines if the provided image is within the viewport\n *\n * @param {ref} imageRef The image dom node to measure against the viewport\n *\n * @returns {boolean} True if image needs to be resized to fit viewport, otherwise false\n */\nconst imageIsOutOfBounds = imageRef => {\n    const {\n        top: topLeftY,\n        left: topLeftX,\n        bottom: bottomRightY,\n        right: bottomRightX\n    } = imageRef.current.getBoundingClientRect();\n    const { innerHeight: windowHeight, innerWidth: windowWidth } = window;\n\n    if (\n        topLeftX > windowWidth * (1 / 2) ||\n        topLeftY > windowHeight * (1 / 2) ||\n        bottomRightX < windowWidth * (1 / 2) ||\n        bottomRightY < windowHeight * (1 / 2)\n    )\n        return true;\n\n    return false;\n};\n\nexport default imageIsOutOfBounds;\n","import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSpring, useSprings, animated, to, config } from 'react-spring';\nimport { useGesture } from 'react-use-gesture';\nimport styled from 'styled-components';\nimport {\n    useDoubleClick,\n    imageIsOutOfBounds,\n    getTranslateOffsetsFromScale,\n    getMagnifierValue\n} from '../../utils';\n\n/**\n * Animates pinch-zoom + panning on image using spring physics\n *\n * @param {string} src The source URL of this image\n * @param {string} alt The alt attribute for this image\n * @param {boolean} isCurrentImage True if this image is currently shown in pager, otherwise false\n * @param {function} setDisableDrag Function that can be called to disable dragging in the pager\n * @param {number} pagerHeight Fixed height of the image stage, used to restrict maximum height of images\n * @param {boolean} singleClickToZoom Overrides the default behavior of double clicking causing an image zoom to a single click\n * @param {boolean} pagerIsDragging Indicates parent ImagePager is in a state of dragging, if true click to zoom is disabled\n *\n * @see https://github.com/react-spring/react-use-gesture\n * @see https://github.com/react-spring/react-spring\n */\n\nconst Annotations = ({ annotations, renderAnnotation, store }) => {\n    const getScale = () => {\n        return { scale: 0.5 };\n    };\n    const [props, api] = useSprings(annotations.length, getScale);\n    useEffect(() => {\n        api(getScale);\n    }, [api]);\n\n    return (\n        <div className=\"annotations-container\">\n            {props?.map(({ scale }, i) => {\n                const style = {\n                    top: `${annotations[i].top}%`,\n                    left: `${annotations[i].left}%`,\n                    width: 20,\n                    height: 20,\n                    zIndex: 3,\n                    position: 'absolute'\n                };\n                return (\n                    <animated.div\n                        className=\"animated-annotation\"\n                        style={{\n                            transform: to([scale], s => `scale(${s})`)\n                        }}\n                    >\n                        {renderAnnotation({\n                            annotation: annotations[i],\n                            store,\n                            style\n                        })}\n                    </animated.div>\n                );\n            })}\n        </div>\n    );\n};\n\nconst Image = ({\n    image,\n    src,\n    alt,\n    pagerHeight,\n    isCurrentImage,\n    setDisableDrag,\n    singleClickToZoom,\n    pagerIsDragging,\n    isAnnotating,\n    renderAnnotation,\n    overlayClick,\n    annotations\n}) => {\n    const imageContainerRef = useRef();\n    const [isPanningImage, setIsPanningImage] = useState(false);\n    const imageRef = useRef();\n    const ratio = image.pictureHeight / image.pictureWidth;\n    const defaultImageTransform = () => ({\n        scale: 1,\n        translateX: 0,\n        translateY: 0,\n        config: { ...config.default, precision: 0.01 }\n    });\n\n    /**\n     * Animates scale and translate offsets of Image as they change in gestures\n     *\n     * @see https://www.react-spring.io/docs/hooks/use-spring\n     */\n    const [{ scale, translateX, translateY }, set] = useSpring(() => ({\n        ...defaultImageTransform(),\n        onFrame: f => {\n            if (f.scale < 1 || !f.pinching) set(defaultImageTransform);\n\n            // Prevent dragging image out of viewport\n            if (f.scale > 1 && imageIsOutOfBounds(imageRef))\n                set(defaultImageTransform());\n        },\n        // Enable dragging in ImagePager if image is at the default size\n        onRest: f => {\n            if (f.scale === 1) setDisableDrag(false);\n        }\n    }));\n\n    // Reset scale of this image when dragging to new image in ImagePager\n    useEffect(() => {\n        if (!isCurrentImage) set(defaultImageTransform);\n    });\n\n    /**\n     * Update Image scale and translate offsets during pinch/pan gestures\n     *\n     * @see https://github.com/react-spring/react-use-gesture#usegesture-hook-supporting-multiple-gestures-at-once\n     */\n    const bind = useGesture(\n        {\n            onPinch: ({\n                movement: [xMovement],\n                origin: [touchOriginX, touchOriginY],\n                event,\n                ctrlKey,\n                last,\n                cancel\n            }) => {\n                // Prevent ImagePager from registering isDragging\n                setDisableDrag(true);\n\n                // Disable click to zoom during pinch\n                if (xMovement && !isPanningImage) setIsPanningImage(true);\n\n                // Don't calculate new translate offsets on final frame\n                if (last) {\n                    cancel();\n                    return;\n                }\n\n                // Speed up pinch zoom when using mouse versus touch\n                const SCALE_FACTOR = ctrlKey ? 1000 : 250;\n                const pinchScale = scale.goal + xMovement / SCALE_FACTOR;\n                const pinchDelta = pinchScale - scale.goal;\n                const { clientX, clientY } = event;\n\n                // Calculate the amount of x, y translate offset needed to\n                // zoom-in to point as image scale grows\n                const [\n                    newTranslateX,\n                    newTranslateY\n                ] = getTranslateOffsetsFromScale({\n                    imageRef,\n                    scale: scale.goal,\n                    pinchDelta,\n                    currentTranslate: [translateX.goal, translateY.goal],\n                    // Use the [x, y] coords of mouse if a trackpad or ctrl + wheel event\n                    // Otherwise use touch origin\n                    touchOrigin: ctrlKey\n                        ? [clientX, clientY]\n                        : [touchOriginX, touchOriginY]\n                });\n\n                // Restrict the amount of zoom between half and 3x image size\n                if (pinchScale < 0.5) set({ scale: 0.5, pinching: true });\n                else if (pinchScale > 3.0) set({ scale: 3.0, pinching: true });\n                else\n                    set({\n                        scale: pinchScale,\n                        translateX: newTranslateX,\n                        translateY: newTranslateY,\n                        pinching: true\n                    });\n            },\n            onPinchEnd: () => {\n                if (scale.goal > 1) setDisableDrag(true);\n                else set(defaultImageTransform);\n                setIsPanningImage(false);\n            },\n            onDragEnd: () =>\n                setTimeout(() => {\n                    setIsPanningImage(false);\n                }, 0),\n            onDrag: ({\n                movement: [xMovement, yMovement],\n                pinching,\n                event,\n                cancel,\n                first,\n                memo = { initialTranslateX: 0, initialTranslateY: 0 }\n            }) => {\n                // Disable click to zoom during drag\n                if (xMovement && yMovement && !isPanningImage)\n                    setIsPanningImage(true);\n\n                if (event.touches && event.touches.length > 1) return;\n                if (pinching || scale.goal <= 1) return;\n\n                // Prevent dragging image out of viewport\n                if (scale.goal > 1 && imageIsOutOfBounds(imageRef)) cancel();\n                else {\n                    if (first) {\n                        return {\n                            initialTranslateX: translateX.goal,\n                            initialTranslateY: translateY.goal\n                        };\n                    }\n\n                    // Translate image from dragging\n                    set({\n                        translateX: memo.initialTranslateX + xMovement,\n                        translateY: memo.initialTranslateY + yMovement\n                    });\n\n                    return memo;\n                }\n            }\n        },\n        /**\n         * useGesture config\n         * @see https://github.com/react-spring/react-use-gesture#usegesture-config\n         */\n        {\n            domTarget: imageRef,\n            event: {\n                passive: false\n            }\n        }\n    );\n\n    /**\n     * @see https://github.com/react-spring/react-use-gesture#adding-gestures-to-dom-nodes\n     */\n    useEffect(bind, [bind]);\n\n    // Handle click/tap on image\n    useDoubleClick({\n        [singleClickToZoom ? 'onSingleClick' : 'onDoubleClick']: e => {\n            if (pagerIsDragging || isPanningImage) {\n                e.stopPropagation();\n                return;\n            }\n\n            // If tapped while already zoomed-in, zoom out to default scale\n            if (scale.goal !== 1) {\n                set(defaultImageTransform);\n                return;\n            }\n\n            // Zoom-in to origin of click on image\n            const magnifierValue = ratio > 2 ? getMagnifierValue(ratio) : 1;\n            const { clientX: touchOriginX, clientY: touchOriginY } = e;\n            const pinchScale = scale.goal + magnifierValue;\n            const pinchDelta = pinchScale - scale.goal;\n\n            // Calculate the amount of x, y translate offset needed to\n            // zoom-in to point as image scale grows\n            const [newTranslateX, newTranslateY] = getTranslateOffsetsFromScale(\n                {\n                    imageRef,\n                    scale: scale.goal,\n                    pinchDelta,\n                    currentTranslate: [translateX.goal, translateY.goal],\n                    touchOrigin: [touchOriginX, touchOriginY]\n                }\n            );\n\n            // Disable dragging in pager\n            setDisableDrag(true);\n            set({\n                scale: pinchScale,\n                translateX: newTranslateX,\n                translateY: newTranslateY,\n                pinching: true\n            });\n        },\n        ref: imageRef,\n        latency: singleClickToZoom ? 0 : 200\n    });\n\n    return (\n        <>\n            <AnimatedImageContainer\n                ref={imageContainerRef}\n                style={{\n                    border: isAnnotating ? '3px solid #fdad1b' : '',\n                    cursor: isAnnotating ? 'crosshair' : '',\n                    transform: to(\n                        [scale, translateX, translateY],\n                        (s, x, y) => `translate(${x}px, ${y}px) scale(${s})`\n                    ),\n                    maxHeight: pagerHeight,\n                    ...(isCurrentImage && { willChange: 'transform' })\n                }}\n                className=\"image-container\"\n            >\n                {isAnnotating && isCurrentImage ? (\n                    <Annotations\n                        rerender\n                        annotations={annotations}\n                        isCurrentImage={isCurrentImage}\n                        renderAnnotation={renderAnnotation}\n                        store={image.imageAnnotationStore}\n                    />\n                ) : null}\n                <AnimatedImage\n                    ref={imageRef}\n                    className=\"lightbox-image\"\n                    style={{\n                        cursor: isAnnotating ? 'crosshair' : '',\n                        transform: to(\n                            [scale, translateX, translateY],\n                            (s, x, y) => `translate(${x}px, ${y}px) scale(${s})`\n                        ),\n                        maxHeight: pagerHeight,\n                        ...(isCurrentImage && { willChange: 'transform' })\n                    }}\n                    src={src}\n                    alt={alt}\n                    draggable=\"false\"\n                    onDragStart={e => {\n                        // Disable image ghost dragging in firefox\n                        e.preventDefault();\n                    }}\n                    onClick={e => {\n                        // Don't close lighbox when clicking image\n                        e.stopPropagation();\n                        e.nativeEvent.stopImmediatePropagation();\n                        if (isAnnotating) {\n                            if (e.ctrlKey || e.metaKey || isPanningImage) {\n                                return;\n                            }\n                            overlayClick(e);\n                        }\n                    }}\n                />\n            </AnimatedImageContainer>\n        </>\n    );\n};\n\nAnnotations.propTypes = {\n    annotations: PropTypes.array.isRequired,\n    renderAnnotation: PropTypes.func.isRequired,\n    store: PropTypes.object.isRequired\n};\n\nImage.propTypes = {\n    /* The source URL of this image */\n    renderAnnotation: PropTypes.bool.isRequired,\n    isAnnotating: PropTypes.bool.isRequired,\n    image: PropTypes.object.isRequired,\n    src: PropTypes.string.isRequired,\n    /* The alt attribute for this image */\n    alt: PropTypes.string.isRequired,\n    /* True if this image is currently shown in pager, otherwise false */\n    isCurrentImage: PropTypes.bool.isRequired,\n    /* Function that can be called to disable dragging in the pager */\n    setDisableDrag: PropTypes.func.isRequired,\n    /* Fixed height of the image stage, used to restrict maximum height of images */\n    pagerHeight: PropTypes.number.isRequired,\n    /* Overrides the default behavior of double clicking causing an image zoom to a single click */\n    singleClickToZoom: PropTypes.bool.isRequired,\n    /* Indicates parent ImagePager is in a state of dragging, if true click to zoom is disabled */\n    pagerIsDragging: PropTypes.bool.isRequired,\n    overlayClick: PropTypes.func.isRequired,\n    annotations: PropTypes.object.isRequired\n};\n\nexport default Image;\n\nconst AnimatedImageContainer = styled(animated.div)`\n    z-index: 1200;\n    width: auto;\n    max-width: 100%;\n    user-select: none;\n    ::selection {\n        background: none;\n    }\n`;\n\nconst AnimatedImage = styled(animated.img)`\n    width: auto;\n    max-width: 100%;\n    user-select: none;\n    ::selection {\n        background: none;\n    }\n`;\n","import { useEffect } from 'react';\n\n/**\n * React Hook that returns the current window size\n * and report updates from the 'resize' window event\n *\n * @param {node} ref Dom node to watch for double clicks\n * @param {number} [latency=300] The amount of time (in milliseconds) to wait before differentiating a single from a double click\n * @param {function} onSingleClick A callback function for single click events\n * @param {function} onDoubleClick A callback function for double click events\n */\nconst useDoubleClick = ({\n    ref,\n    latency = 300,\n    onSingleClick = () => null,\n    onDoubleClick = () => null\n}) => {\n    useEffect(() => {\n        const clickRef = ref.current;\n        let clickCount = 0;\n        const handleClick = e => {\n            clickCount += 1;\n\n            setTimeout(() => {\n                if (clickCount === 1) onSingleClick(e);\n                else if (clickCount === 2) onDoubleClick(e);\n\n                clickCount = 0;\n            }, latency);\n        };\n\n        // Add event listener for click events\n        clickRef.addEventListener('click', handleClick);\n\n        // Remove event listener\n        return () => {\n            clickRef.removeEventListener('click', handleClick);\n        };\n    });\n};\n\nexport default useDoubleClick;\n","/* eslint-disable no-restricted-syntax */\nconst getMagnifierValue = ratio => {\n    const array = [...Array(20).keys()];\n    let magnifierValue;\n\n    for (const index of array) {\n        if (index > ratio) {\n            magnifierValue = index - 1;\n            break;\n        }\n    }\n\n    return magnifierValue;\n};\n\nexport default getMagnifierValue;","/* eslint-disable react/no-array-index-key */\nimport React, { useRef, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSprings, animated } from 'react-spring';\nimport { useGesture } from 'react-use-gesture';\nimport styled from 'styled-components';\nimport { useWindowSize } from '../../utils';\nimport Image from '../Image';\n\n/**\n * Gesture controlled surface that animates prev/next page changes via spring physics.\n *\n * @param {array} images Array of image objects to be shown in Lightbox\n * @param {number} currentIndex Index of image in images array that is currently shown\n * @param {function} onPrev True if this image is currently shown in pager, otherwise false\n * @param {function} onNext Function that can be called to disable dragging in the pager\n * @param {function} onClose Function that closes the Lightbox\n * @param {function} renderImageOverlay A React component that renders inside the image stage, useful for making overlays over the image\n * @param {boolean} singleClickToZoom Overrides the default behavior of double clicking causing an image zoom to a single click\n *\n * @see https://github.com/react-spring/react-use-gesture\n * @see https://github.com/react-spring/react-spring\n */\nconst ImagePager = ({\n    images,\n    currentIndex,\n    onPrev,\n    onNext,\n    onClose,\n    renderImageOverlay,\n    renderCustomComponent,\n    singleClickToZoom,\n    isAnnotating,\n    renderAnnotation,\n    overlayClick,\n    annotations\n}) => {\n    const firstRender = useRef(true);\n    const imageStageRef = useRef(\n        [...Array(images.length)].map(() => React.createRef())\n    );\n    const { height: windowHeight, width: pageWidth } = useWindowSize();\n    const [disableDrag, setDisableDrag] = useState(false);\n    const [pagerHeight, setPagerHeight] = useState('100%');\n    const [isDragging, setIsDragging] = useState(false);\n\n    // Generate page positions based on current index\n    const getPagePositions = (i, down = false, xDelta = 0) => {\n        const x = (i - currentIndex) * pageWidth + (down ? xDelta : 0);\n        if (i < currentIndex - 1 || i > currentIndex + 1)\n            return { x, display: 'none' };\n        return { x, display: 'flex' };\n    };\n\n    /**\n     * Animates translateX of all images at the same time\n     *\n     * @see https://www.react-spring.io/docs/hooks/use-springs\n     */\n    const [props, set] = useSprings(images.length, getPagePositions);\n\n    // Determine the absolute height of the image pager\n    useEffect(() => {\n        const currPagerHeight =\n            imageStageRef.current[currentIndex].current.clientHeight - 50;\n        if (pagerHeight !== currPagerHeight) setPagerHeight(currPagerHeight);\n    }, [currentIndex, pagerHeight, windowHeight]);\n\n    // Animate page change if currentIndex changes\n    useEffect(() => {\n        // No need to set page position for initial render\n        if (firstRender.current) {\n            firstRender.current = false;\n            return;\n        }\n\n        // Update page positions after prev/next page state change\n        set(getPagePositions);\n    });\n\n    /**\n     * Update each Image's visibility and translateX offset during dragging\n     *\n     * @see https://github.com/react-spring/react-use-gesture\n     */\n    const bind = useGesture(\n        {\n            // onWheel: ({\n            //     distance,\n            //     velocity,\n            //     direction: [xDir, yDir],\n            //     ctrlKey\n            // }) => {\n            //     // Disable drag if Image has been zoomed in to allow for panning\n            //     if (ctrlKey || disableDrag || velocity === 0) return;\n\n            //     const draggedFarEnough = distance > pageWidth / 3;\n            //     const draggedFastEnough =\n            //         velocity > 1.5 && distance <= pageWidth / 3;\n\n            //     // Handle next/prev image from valid drag\n            //     if (draggedFarEnough || draggedFastEnough) {\n            //         const goToIndex = xDir + yDir > 0 ? -1 : 1;\n\n            //         if (goToIndex > 0) onNext();\n            //         else if (goToIndex < 0) onPrev();\n            //     }\n            // },\n            // onWheelEnd: () => {\n            //     set(i => getPagePositions(i, false, 0));\n            //     setIsDragging(false);\n            // },\n            onDrag: ({\n                down,\n                movement: [xMovement],\n                direction: [xDir],\n                velocity,\n                distance,\n                cancel,\n                touches\n            }) => {\n                // Disable drag if Image has been zoomed in to allow for panning\n                if (disableDrag || xMovement === 0) return;\n                if (!isDragging) setIsDragging(true);\n\n                const isHorizontalDrag = Math.abs(xDir) > 0.7;\n                const draggedFarEnough =\n                    down && isHorizontalDrag && distance > pageWidth / 3.5;\n                const draggedFastEnough =\n                    down && isHorizontalDrag && velocity > 2;\n\n                // Handle next/prev image from valid drag\n                if (draggedFarEnough || draggedFastEnough) {\n                    const goToIndex = xDir > 0 ? -1 : 1;\n\n                    // Cancel gesture animation\n                    cancel();\n\n                    if (goToIndex > 0) onNext();\n                    else if (goToIndex < 0) onPrev();\n                }\n\n                // Don't move pager during two+ finger touch events, i.e. pinch-zoom\n                if (touches > 1) return;\n\n                // Update page x-coordinates for single finger/mouse gestures\n                set(i => getPagePositions(i, down, xMovement));\n            },\n            onDragEnd: () => setIsDragging(false)\n        },\n        /**\n         * useGesture config\n         * @see https://github.com/react-spring/react-use-gesture#usegesture-config\n         */\n        {\n            domTarget: imageStageRef.current[currentIndex],\n            event: {\n                passive: true,\n                capture: false\n            },\n            enabled: Boolean(\n                !images[currentIndex].disableDrag || images.length > 1\n            )\n        }\n    );\n    /**\n     * @see https://github.com/react-spring/react-use-gesture#adding-gestures-to-dom-nodes\n     */\n    useEffect(() => {\n        bind();\n    }, [bind, images, currentIndex]);\n\n    return props.map(({ x, display }, i) => (\n        <AnimatedImagePager\n            role=\"presentation\"\n            ref={imageStageRef.current[i]}\n            key={i}\n            className=\"lightbox-image-pager\"\n            style={{\n                display,\n                transform: x.to(xInterp => `translateX(${xInterp}px)`)\n            }}\n            onClick={onClose}\n        >\n            {renderCustomComponent({\n                attachment: images[i],\n                index: i,\n                currentIndex\n            })}\n            <PagerContentWrapper>\n                <PagerInnerContentWrapper>\n                    <ImageContainer\n                        onClick={e => {\n                            e.stopPropagation();\n                            e.nativeEvent.stopImmediatePropagation();\n                        }}\n                    >\n                        <Image\n                            annotations={annotations}\n                            overlayClick={overlayClick}\n                            renderAnnotation={renderAnnotation}\n                            isAnnotating={isAnnotating}\n                            image={images[i]}\n                            setDisableDrag={setDisableDrag}\n                            src={images[i].src}\n                            alt={images[i].alt}\n                            pagerHeight={pagerHeight}\n                            isCurrentImage={i === currentIndex}\n                            pagerIsDragging={isDragging}\n                            singleClickToZoom={singleClickToZoom}\n                        />\n                        {renderImageOverlay({\n                            attachment: images[i],\n                            index: i,\n                            currentIndex\n                        })}\n                    </ImageContainer>\n                </PagerInnerContentWrapper>\n            </PagerContentWrapper>\n        </AnimatedImagePager>\n    ));\n};\n\nImagePager.propTypes = {\n    /* Function that closes the Lightbox */\n    onClose: PropTypes.func.isRequired,\n    /* Function that triggers ImagePager to move to the previous image */\n    onPrev: PropTypes.func.isRequired,\n    /* Function that triggers ImagePager to move to the next image */\n    onNext: PropTypes.func.isRequired,\n    /* Index of image in images array that is currently shown */\n    currentIndex: PropTypes.number.isRequired,\n    /* Array of images to be shown in Lightbox */\n    images: PropTypes.arrayOf(\n        PropTypes.shape({\n            /* The source URL of this image */\n            src: PropTypes.string.isRequired,\n            /* The alt attribute for this image */\n            alt: PropTypes.string.isRequired\n        })\n    ).isRequired,\n    /* A React component that renders inside the image stage, useful for making overlays over the image */\n    renderImageOverlay: PropTypes.func.isRequired,\n    /* Fixed height of the image stage, used to restrict maximum height of images */\n    pagerHeight: PropTypes.number.isRequired,\n    /* Overrides the default behavior of double clicking causing an image zoom to a single click */\n    singleClickToZoom: PropTypes.isRequired,\n    annotations: PropTypes.object.isRequired\n};\n\nexport default ImagePager;\n\nconst PagerInnerContentWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst PagerContentWrapper = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: center;\n`;\n\nconst AnimatedImagePager = styled(animated.div)`\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    right: 0px;\n    bottom: 0px;\n    height: 100%;\n    width: 100%;\n    will-change: transform;\n    touch-action: none;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst ImageContainer = styled.div`\n    position: relative;\n    touch-action: none;\n    user-select: none;\n`;\n","import { useState, useEffect } from 'react';\n\n/**\n * React Hook that returns the current window size\n * and report updates from the 'resize' window event\n *\n * @typedef {WindowSize} WindowSize\n * @property {number} width Window width\n * @property {number} height Window height\n * @returns {WindowSize} An object container the window width and height\n */\nconst useWindowSize = () => {\n    const [windowSize, setWindowSize] = useState({\n        width: window.innerWidth,\n        height: window.innerHeight\n    });\n\n    useEffect(() => {\n        const handleResize = () => {\n            if (\n                window.innerHeight !== windowSize.height ||\n                window.innerWidth !== windowSize.width\n            ) {\n                setWindowSize({\n                    width: window.innerWidth,\n                    height: window.innerHeight\n                });\n            }\n        };\n\n        // Add event listener for window resize events\n        window.addEventListener('resize', handleResize);\n        window.addEventListener('orientationchange', handleResize);\n\n        // Remove event listener\n        return () => {\n            window.removeEventListener('resize', handleResize);\n            window.addEventListener('orientationchange', handleResize);\n        };\n    });\n\n    return windowSize;\n};\n\nexport default useWindowSize;\n","/* eslint-disable no-shadow */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport ImagePager from './components/ImagePager';\n\n/**\n * Containing element for ImagePager and prev/next button controls\n *\n * @param {array} images Array of image objects to be shown in Lightbox\n * @param {number} currentIndex Index of image in images array that is currently shown\n * @param {function} onPrev True if this image is currently shown in pager, otherwise false\n * @param {function} onNext Function that can be called to disable dragging in the pager\n * @param {function} renderPrevButton A React component that is used for previous button in image pager\n * @param {function} renderNextButton A React component that is used for next button in image pager\n * @param {function} renderImageOverlay A React component that renders inside the image stage, useful for making overlays over the image\n * @param {boolean} singleClickToZoom Overrides the default behavior of double clicking causing an image zoom to a single click\n */\nconst ImageStage = ({\n    images,\n    currentIndex,\n    onPrev,\n    onNext,\n    onClose,\n    renderPrevButton,\n    renderNextButton,\n    renderImageOverlay,\n    renderCustomComponent,\n    singleClickToZoom,\n    isAnnotating,\n    renderAnnotation,\n    overlayClick,\n    annotations\n}) => {\n    // Extra sanity check that the next/prev image exists before moving to it\n    const canPrev = currentIndex > 0;\n    const canNext = currentIndex + 1 < images.length;\n    return (\n        <ImageStageContainer className=\"lightbox-image-stage\">\n            {renderPrevButton({ canPrev })}\n            <ImagePager\n                annotations={annotations}\n                overlayClick={overlayClick}\n                isAnnotating={isAnnotating}\n                images={images}\n                currentIndex={currentIndex}\n                onClose={onClose}\n                onNext={onNext}\n                onPrev={onPrev}\n                renderImageOverlay={renderImageOverlay}\n                renderCustomComponent={renderCustomComponent}\n                renderAnnotation={renderAnnotation}\n                singleClickToZoom={singleClickToZoom}\n            />\n            {renderNextButton({ canNext })}\n        </ImageStageContainer>\n    );\n};\n\nImageStage.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    onPrev: PropTypes.func.isRequired,\n    onNext: PropTypes.func.isRequired,\n    currentIndex: PropTypes.number.isRequired,\n    images: PropTypes.arrayOf(\n        PropTypes.shape({\n            src: PropTypes.string.isRequired,\n            caption: PropTypes.string.isRequired,\n            alt: PropTypes.string.isRequired,\n            width: PropTypes.number,\n            height: PropTypes.number\n        })\n    ).isRequired,\n    renderPrevButton: PropTypes.func.isRequired,\n    renderNextButton: PropTypes.func.isRequired,\n    renderImageOverlay: PropTypes.func.isRequired,\n    renderCustomComponent: PropTypes.func.isRequired,\n    singleClickToZoom: PropTypes.isRequired,\n    isAnnotating: PropTypes.bool.isRequired,\n    renderAnnotation: PropTypes.func.isRequired,\n    overlayClick: PropTypes.func.isRequired,\n    annotations: PropTypes.object.isRequired\n};\n\nexport default ImageStage;\n\nconst ImageStageContainer = styled.div`\n    flex-grow: 1;\n    position: relative;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTransition, animated, config } from 'react-spring';\nimport styled from 'styled-components';\n\n/**\n * Animates the lightbox as it opens/closes\n *\n * @param {ReactNode} children All child components of Lightbox\n * @param {boolean} isOpen Flag that dictates if the lightbox is open or closed\n * @param {string} className Classes are applied to the root lightbox component\n * @param {object} style Inline styles are applied to the root lightbox component\n * @param {object} pageTransitionConfig React-Spring useTransition config for page open/close animation\n *\n * @see https://www.react-spring.io/docs/hooks/use-transition\n */\nconst PageContainer = ({\n    children,\n    isOpen,\n    className,\n    style,\n    pageTransitionConfig\n}) => {\n    const defaultTransition = {\n        from: { transform: 'scale(0.75)', opacity: 0 },\n        enter: { transform: 'scale(1)', opacity: 1 },\n        leave: { transform: 'scale(0.75)', opacity: 0 },\n        config: { ...config.default, mass: 1, tension: 320, friction: 32 }\n    };\n\n    const transition = useTransition(isOpen, {\n        ...defaultTransition,\n        ...pageTransitionConfig\n    });\n\n    return transition(\n        (style, item, t, key) =>\n            item && (\n                <AnimatedPageContainer\n                    key={key}\n                    className={`lightbox-container${\n                        className ? ` ${className}` : ''\n                    }`}\n                    style={style}\n                >\n                    {children}\n                </AnimatedPageContainer>\n            )\n    );\n};\n\nPageContainer.propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.element),\n        PropTypes.element\n    ]).isRequired,\n    className: PropTypes.string,\n    style: PropTypes.object,\n    pageTransitionConfig: PropTypes.object\n};\n\nexport default PageContainer;\n\nconst AnimatedPageContainer = styled(animated.div)`\n    display: flex;\n    flex-direction: column;\n    position: fixed;\n    z-index: 400;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\n/**\n * Creates a SSR + next.js friendly React Portal inside <body />\n *\n * Child components are rendered on the client side only\n *\n * @param {array|node} children Child components will be rendered to the portal\n * @see https://reactjs.org/docs/portals.html\n */\nexport default class CreatePortal extends React.Component {\n    static propTypes = {\n        children: PropTypes.oneOfType([\n            PropTypes.arrayOf(PropTypes.element),\n            PropTypes.element\n        ]).isRequired\n    };\n\n    // Only executes on the client-side\n    componentDidMount() {\n        // Get the document body\n        this.body = document.body;\n\n        // Create a container <div /> for React Portal\n        this.portalContainer = document.createElement('div');\n        this.portalContainer.setAttribute('class', 'lightbox-portal');\n\n        // Append the container to the document body\n        this.body.appendChild(this.portalContainer);\n\n        // Force a re-render as we're on the client side now\n        // children prop will render to portalContainer\n        this.forceUpdate();\n\n        // Add event listener to prevent trackpad/ctrl+mousewheel zooming of lightbox\n        // Zooming is handled specifically within /ImageStage/components/Image\n        // this.portalContainer.addEventListener('wheel', this.preventWheel);\n    }\n\n    componentWillUnmount() {\n        // Remove wheel event listener\n        // this.portalContainer.removeEventListener('wheel', this.preventWheel);\n\n        // Cleanup Portal from DOM\n        this.body.removeChild(this.portalContainer);\n    }\n\n    preventWheel = e => e.preventDefault();\n\n    render() {\n        // Return null during SSR\n        if (this.portalContainer === undefined) return null;\n\n        const { children } = this.props;\n\n        return ReactDOM.createPortal(children, this.portalContainer);\n    }\n}\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { ImageStage, PageContainer, CreatePortal } from './components';\n\n/**\n * Gesture controlled lightbox that interpolates animations with spring physics.\n *\n * @param {boolean} isOpen Flag that dictates if the lightbox is open or closed\n * @param {function} onClose Function that closes the Lightbox\n * @param {function} onPrev Function that changes currentIndex to previous image in images\n * @param {function} onNext Function that changes currentIndex to next image in images\n * @param {number} currentIndex Index of image in images array that is currently shown\n * @param {function} renderHeader A React component that renders above the image pager\n * @param {function} renderFooter A React component that renders below the image pager\n * @param {function} renderImageOverlay A React component that renders inside the image stage, useful for making overlays over the image\n * @param {function} renderPrevButton A React component that is used for previous button in image pager\n * @param {function} renderNextButton A React component that is used for next button in image pager\n * @param {array} images Array of image objects to be shown in Lightbox\n * @param {string} className Classes are applied to the root lightbox component\n * @param {object} style Inline styles are applied to the root lightbox component\n * @param {object} pageTransitionConfig React-Spring useTransition config for page open/close animation\n * @param {boolean} singleClickToZoom Overrides the default behavior of double clicking causing an image zoom to a single click\n *\n * @see https://github.com/react-spring/react-use-gesture\n * @see https://github.com/react-spring/react-spring\n */\nconst Lightbox = ({\n    isOpen,\n    onClose,\n    images,\n    currentIndex,\n    onPrev,\n    onNext,\n    renderHeader,\n    renderFooter,\n    renderPrevButton,\n    renderNextButton,\n    renderImageOverlay,\n    renderCustomComponent,\n    renderCustomSidebar,\n    className,\n    singleClickToZoom,\n    style,\n    pageTransitionConfig,\n    isAnnotating,\n    renderAnnotation,\n    overlayClick,\n    annotations\n}) => {\n    // Handle event listeners for keyboard\n    useEffect(() => {\n        /**\n         * Prevent keyboard from controlling background page\n         * when lightbox is open\n         */\n        const preventBackgroundScroll = e => {\n            const keysToIgnore = [\n                'ArrowUp',\n                'ArrowDown',\n                'End',\n                'Home',\n                'PageUp',\n                'PageDown'\n            ];\n\n            if (isOpen && keysToIgnore.includes(e.key)) e.preventDefault();\n        };\n\n        /**\n         * Navigate images with arrow keys, close on Esc key\n         */\n        const handleKeyboardInput = e => {\n            if (isOpen) {\n                switch (e.key) {\n                    case 'ArrowLeft':\n                        onPrev();\n                        break;\n                    case 'ArrowRight':\n                        onNext();\n                        break;\n                    default:\n                        e.preventDefault();\n                        break;\n                }\n            }\n        };\n\n        document.addEventListener('keyup', handleKeyboardInput);\n        document.addEventListener('keydown', preventBackgroundScroll);\n\n        return () => {\n            document.removeEventListener('keyup', handleKeyboardInput);\n            document.removeEventListener('keydown', preventBackgroundScroll);\n        };\n    });\n\n    return (\n        <CreatePortal>\n            <PageContainer\n                isOpen={isOpen}\n                className={className}\n                style={style}\n                pageTransitionConfig={pageTransitionConfig}\n            >\n                {renderHeader()}\n                <div className=\"view-container\">\n                    <ViewContainer>\n                        <ImageStage\n                            annotations={annotations}\n                            overlayClick={overlayClick}\n                            isAnnotating={isAnnotating}\n                            images={images}\n                            onClose={onClose}\n                            currentIndex={currentIndex}\n                            onPrev={onPrev}\n                            onNext={onNext}\n                            renderPrevButton={renderPrevButton}\n                            renderNextButton={renderNextButton}\n                            renderImageOverlay={renderImageOverlay}\n                            renderCustomComponent={renderCustomComponent}\n                            singleClickToZoom={singleClickToZoom}\n                            renderAnnotation={renderAnnotation}\n                        />\n                        {renderFooter()}\n                    </ViewContainer>\n                    {renderCustomSidebar()}\n                </div>\n            </PageContainer>\n        </CreatePortal>\n    );\n};\n\nLightbox.propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    onPrev: PropTypes.func.isRequired,\n    onNext: PropTypes.func.isRequired,\n    currentIndex: PropTypes.number.isRequired,\n    images: PropTypes.arrayOf(\n        PropTypes.shape({\n            src: PropTypes.string.isRequired,\n            caption: PropTypes.string.isRequired,\n            alt: PropTypes.string.isRequired,\n            width: PropTypes.number,\n            height: PropTypes.number\n        })\n    ).isRequired,\n    renderHeader: PropTypes.func,\n    renderFooter: PropTypes.func,\n    renderPrevButton: PropTypes.func,\n    renderNextButton: PropTypes.func,\n    className: PropTypes.string,\n    style: PropTypes.object,\n    pageTransitionConfig: PropTypes.object,\n    renderImageOverlay: PropTypes.func,\n    renderCustomComponent: PropTypes.func,\n    renderCustomSidebar: PropTypes.func,\n    singleClickToZoom: PropTypes.bool,\n    isAnnotating: PropTypes.bool.isRequired,\n    renderAnnotation: PropTypes.func.isRequired,\n    overlayClick: PropTypes.func.isRequired,\n    annotations: PropTypes.object.isRequired\n};\n\nLightbox.defaultProps = {\n    pageTransitionConfig: null,\n    className: null,\n    style: null,\n    renderHeader: () => null,\n    renderFooter: () => null,\n    renderPrevButton: () => null,\n    renderNextButton: () => null,\n    renderImageOverlay: () => null,\n    renderCustomComponent: () => null,\n    renderCustomSidebar: () => null,\n    singleClickToZoom: false\n};\n\nconst ViewContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    position: relative;\n    z-index: 400;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    width: 100%;\n`;\n\nexport default Lightbox;\n"],"names":["getTranslateOffsetsFromScale","imageRef","scale","pinchDelta","touchOrigin","touchOriginX","touchOriginY","currentTranslate","translateX","translateY","current","getBoundingClientRect","imageTopLeftY","top","left","width","height","imageIsOutOfBounds","topLeftY","topLeftX","bottomRightY","bottom","bottomRightX","right","window","windowHeight","innerHeight","windowWidth","innerWidth","Annotations","annotations","renderAnnotation","store","getScale","useSprings","length","props","api","useEffect","React","className","map","i","style","zIndex","position","animated","div","transform","to","s","annotation","Image","image","src","alt","pagerHeight","isCurrentImage","setDisableDrag","singleClickToZoom","pagerIsDragging","isAnnotating","overlayClick","imageContainerRef","useRef","useState","isPanningImage","setIsPanningImage","ratio","pictureHeight","pictureWidth","defaultImageTransform","config","precision","useSpring","onFrame","f","pinching","set","onRest","ref","latency","onSingleClick","onDoubleClick","bind","useGesture","onPinch","xMovement","movement","origin","event","ctrlKey","last","cancel","SCALE_FACTOR","pinchScale","goal","clientX","clientY","newTranslateX","newTranslateY","onPinchEnd","onDragEnd","setTimeout","onDrag","yMovement","first","memo","initialTranslateX","initialTranslateY","touches","domTarget","passive","e","stopPropagation","magnifierValue","Array","keys","index","getMagnifierValue","clickRef","clickCount","handleClick","addEventListener","removeEventListener","AnimatedImageContainer","border","cursor","x","y","maxHeight","willChange","rerender","imageAnnotationStore","AnimatedImage","draggable","onDragStart","preventDefault","onClick","nativeEvent","stopImmediatePropagation","metaKey","styled","img","ImagePager","images","currentIndex","onPrev","onNext","onClose","renderImageOverlay","renderCustomComponent","firstRender","imageStageRef","_toConsumableArray","createRef","windowSize","setWindowSize","handleResize","useWindowSize","pageWidth","disableDrag","setPagerHeight","isDragging","setIsDragging","getPagePositions","down","xDelta","display","currPagerHeight","clientHeight","xDir","direction","velocity","distance","isHorizontalDrag","Math","abs","goToIndex","capture","enabled","Boolean","AnimatedImagePager","role","key","xInterp","attachment","PagerContentWrapper","PagerInnerContentWrapper","ImageContainer","ImageStage","renderPrevButton","renderNextButton","canPrev","canNext","ImageStageContainer","PageContainer","children","isOpen","pageTransitionConfig","defaultTransition","from","opacity","enter","leave","mass","tension","friction","useTransition","transition","item","t","AnimatedPageContainer","CreatePortal","body","document","portalContainer","createElement","setAttribute","appendChild","this","forceUpdate","removeChild","undefined","ReactDOM","createPortal","Component","Lightbox","renderHeader","renderFooter","renderCustomSidebar","preventBackgroundScroll","includes","handleKeyboardInput","ViewContainer","defaultProps"],"mappings":"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"}